import java.util.concurrent.Semaphore;
class Buffer 
{
    int shared;
    static Semaphore c = new Semaphore(0);
    static Semaphore p = new Semaphore(1);
    void consume()
    {
        try
        {
            c.acquire();
            
        } 
        catch(InterruptedException e)
        {
            System.out.println(e);
            
        }
        System.out.println("Consumer consumed shared item : " + (shared+1));
        p.release();
    }

    void produce(int x)
    {
        try
        {
            
            p.acquire();
            
        } 
        catch(InterruptedException e)
        {
            System.out.println(e);
            
        }
        this.shared = x;
        System.out.println("Producer produced shared item : " + (shared+1));
        c.release();
        }
    }


class Producer implements Runnable 
{
    Buffer b;

    Producer(Buffer b1)
    {
        this.b = b1;
        new Thread(this, "Producer").start();
     }
        public void run()
        {
        for (int i = 0; i < 3; i++)
        b.produce(i);
    
    }
}

class Consumer implements Runnable 
{

    Buffer b;

    Consumer(Buffer b1)
    {
        this.b = b1;
        new Thread(this, "Consumer").start();
      }
        public void run()
        {
        for (int i = 0; i < 3; i++)
        b.consume();
    
    }
}
class Main 
{
    public static void main(String args[])
    {
        Buffer buf = new Buffer();
        Consumer c = new Consumer(buf);
        Producer p = new Producer(buf);
    }
}
